#!/usr/bin/env node

const parseArgs = require('minimist')

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    p: 'profile', // config file
    i: 'icon',
    s: 'splashscreen',
    m: 'mode',
    f: 'filter',
    q: 'quality',
    c: 'color',   // theme color for SVGs
    t: 'type',    // Cordova/Capacitor mode only
    b: 'bgcolor', // Cordova/Capacitor mode only
    h: 'help'
  },
  boolean: [ 'h' ],
  string: [ 'i', 's', 'm', 'f', 'q', 'c', 't', 'b', 'p' ]
})

const { green } = require('chalk')

if (argv.help) {
  const modes = Object.keys(require('../lib/modes')).join('|')
  const generators = Object.keys(require('../lib/generators')).join('|')

  console.log(`
  Description
    Starts the app in development mode (hot-code reloading, error
    reporting, etc)

  Usage
    # generate icons for all installed Quasar modes
    $ icongenie generate -i /path/to/icon.png
    $ icongenie g -i /path/to/icon.png

    # generate for (as example) PWA mode only
    $ icongenie generate -m pwa -i /path/to/icon.png

    # generate for (as example) Capacitor mode only
    $ icongenie g -m capacitor -i /path/to/icon.png -s /path/to/splashscreen.png

  Options
    --icon, -i          ${green('Required')};
                        Path to source file for icons; must be:
                          - a .png file
                          - have resolution: 1240x1240px
                          - with transparency

    --splashscreen, -s  Only ${green('required for Cordova/Capacitor mode')};
                        Path to source file for splashscreens; must be:
                          - a .png file
                          - have resolution: 2436x2436px
                          - transparency is optional

    --mode, -m          For which Quasar mode to generate icon files
                        (if no mode is specified, it detects what modes
                        are installed and generates for all them)
                          [all|${modes}]

    --filter, -f        Filter the available generators; when used, it can
                        generate only one type of asset instead of all
                          [${generators}]

    --quality           Quality of the files [1 - 12] (default: 5)
                          - higher quality --> bigger filesize, slower
                          - lower quality  --> smaller filesize, faster

    --color, -c         Theme color used for the SVGs
                          (default: '#1976D2')

    --profile           Use a JSON config file with predefined parameters and
                        assets list. Any parameters specified along this one
                        in the terminal will override the config file's settings.
                        Structure of the file:
                          {
                            params: { /* parameter_name: parameter_value */ },
                            assets: [ /* list of assets */ ]
                          }

    --help, -h          Displays this message

    Only for Cordova/Capacitor mode:

    --type, -t          Splashscreens build strategy: (default is "pure")
                          pure    => Doesn't adds bg color or overlaps the icon
                          bg      => Generate with background color and icon
                          overlay => Overlay the icon source file centered on top of
                                     the splashscreen source file

    --bgcolor, -b       Background color for icons and splashscreens
                          - hex format (not hexa); no transparency allowed
                          - default: #000074
  `)
  process.exit(0)
}

const parseArgv = require('../lib/parse-argv')
const mergeObjects = require('../lib/merge-objects')

const profile = {
  params: {},
  assets: []
}

if (argv.profile) {
  // verify "profile" param
  parseArgv(argv, [ 'profile' ])

  const getProfile = require('../lib/get-profile')
  const userProfile = getProfile(argv.profile)

  if (userProfile.params) {
    profile.params = mergeObjects(userProfile.params, argv)
  }
  if (userProfile.assets) {
    profile.assets = userProfile.assets
  }
}
else {
  profile.params = { ...argv }
}

// apply defaults
const defaults = {
  mode: 'all',
  quality: 5,
  bgcolor: '#000074',
  type: 'pure',
  color: '#1976D2'
}

profile.params = mergeObjects(defaults, profile.params)

// ensure all params are valid
parseArgv(profile.params, [
  'mode', 'quality', 'filter', 'type', 'bgcolor', 'icon', 'splashscreen'
])

const generate = require('../lib/cmd/generate')

generate(profile)
