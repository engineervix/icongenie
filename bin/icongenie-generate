#!/usr/bin/env node

const parseArgs = require('minimist')

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    p: 'profile', // config file
    i: 'icon',
    m: 'mode',
    f: 'filter',
    q: 'quality',
    c: 'color', // theme color
    h: 'help'
  },
  boolean: [ 'h' ],
  string: [
    'p', 'i', 'm', 'f', 'q', 'c',
    'landscape', // file; Cordova/Capacitor only
    'portrait', // file; Cordova/Capacitor only
    'splashscreen' // type; Cordova/Capacitor only
  ]
})

const { green } = require('chalk')

if (argv.help) {
  const modes = Object.keys(require('../lib/modes')).join('|')
  const generators = Object.keys(require('../lib/generators')).join('|')

  console.log(`
  Description
    Starts the app in development mode (hot-code reloading, error
    reporting, etc)

  Usage
    # generate icons for all installed Quasar modes
    $ icongenie generate -i /path/to/icon.png
    $ icongenie g -i /path/to/icon.png

    # generate for (as example) PWA mode only
    $ icongenie generate -m pwa --icon /path/to/icon.png

    # generate for (as example) Capacitor mode only
    $ icongenie g -m capacitor -i
         /path/to/icon.png --landscape /path/to/landscape.png
         --portrait /path/to/portrait.png

    # generate by using a profile file
    $ icongenie generate -p ./icongenie-profile.json

    # generate by using batch of profile files
    $ icongenie generate -p ./folder-containing-profile-files

  Options
    --icon, -i          ${green('Required')};
                        Path to source file for icons; must be:
                          - a .png file
                          - min resolution: 64x64 px (the higher the better!!)
                          - with transparency
                        Path can be absolute, or relative to the root of the
                          Quasar project folder
                        Recommended min size: 1240x1240 px

    --landscape         Only ${green('required for Cordova/Capacitor mode')};
                        Path to landscape source file for splashscreens; must be:
                          - a .png file
                          - min resolution: 128x128 px (the higher the better!!)
                          - width should be HIGHER than height
                          - transparency is optional
                        Path can be absolute, or relative to the root of the
                          Quasar project folder
                        Recommended min size: 2048x1024 px

    --portrait          Only ${green('required for Cordova/Capacitor mode')};
                        Path to portrait source file for splashscreens; must be:
                          - a .png file
                          - min resolution: 128x128 px (the higher the better!!)
                          - width should be LOWER than height
                          - transparency is optional
                        Path can be absolute, or relative to the root of the
                          Quasar project folder
                        Recommended min size: 1024x2048 px

    --mode, -m          For which Quasar mode(s) to generate the assets;
                        Default: all
                          [all|${modes}]
                        Multiple can be specified, separated by ",":
                          spa,cordova

    --filter, -f        Filter the available generators; when used, it can
                        generate only one type of asset instead of all
                          [${generators}]

    --quality           Quality of the files [1 - 12] (default: 5)
                          - higher quality --> bigger filesize, slower
                          - lower quality  --> smaller filesize, faster

    --color, -c         Theme color (default: #1976D2) to use for the
                        monochrome SVGs, for some of the iOS icons and for
                        mobile splashscreens background.
                        The color must be in hex format (not hexa) and
                        so no transparency is allowed.

    --profile, -p       Use JSON profile file(s):
                          - path to folder (absolute or relative to current folder)
                            that contains JSON profile files (icongenie-*.json)
                          - path to a single *.json profile file (absolute or relative
                            to current folder)
                        Structure of a JSON profile file:
                          {
                            "params": {
                              "include": [ ... ], /* optional */
                              ...
                            },
                            "assets": [ /* list of custom assets */ ]
                          }

    --help, -h          Displays this message

    Only for Cordova/Capacitor mode:

    --splashscreen      Splashscreens build strategy: (default is "pure")
                          pure    => Doesn't adds bg color or overlaps the icon
                          bg      => Generate with background color and icon
                          overlay => Overlay the icon source file centered on top of
                                     the splashscreen source file
  `)
  process.exit(0)
}

const parseArgv = require('../lib/utils/parse-argv')
const generate = require('../lib/cmd/generate')
const getProfileFiles = require('../lib/utils/get-profile-files')
const filterArgvParams = require('../lib/utils/filter-argv-params')
const { log } = require('../lib/utils/logger')

async function runProfiles (params, profileFiles) {
  for (let i = 0; i < profileFiles.length; i++) {
    const profile = profileFiles[i]

    console.log(`\n`)
    log(`---------------------`)
    log(`Generating by profile: ${profile}`)
    log(`---------------------`)
    console.log(`\n`)

    await generate({ ...params, profile })
  }
}

const params = filterArgvParams(argv)

if (params.profile) {
  parseArgv(params, [ 'profile' ])
  runProfiles(params, getProfileFiles(params.profile))
}
else {
  generate(params)
}
